<!--
**NOTE** This file is generated automatically. Please edit `README.md.tmpl` to 
make any changes and then rerender the template by running `python render_readme.py`.
-->

# cdt-builds

conda-forge Core Dependency Tree (CDT) builds


## `cdt_slugs.yaml` Configuration Options

The following options are available when adding a CDT in the configuration file:

 - `custom` (boolean): Set to `true` to declare the CDT as a custom CDT. This will
   cause the CDT generation code to remove any instance of the CDT that appears in the
   `cdts` or `legacy_cdts` directories.
 - `license_file` (str or list of str or null): Sets the license file for a CDT. If set to
   a string or a list of strings giving the paths to the files, it will copy the licenses
   to the recipe and modify the recipe `meta.yaml` appropriately. If set to `null`, it will
   remove the `license_file` key from the `meta.yaml`.
 - `skipped_cdts` (list of str): Set to a list of the distribution and platforms to skip
   for this CDT. For example, one might add `cos6-x86_64` to this list to skip making this
   CDT for CentOS 6 on `x86_64` architectures.
 - `build_append` (dict mapping dist-arch to a string): Set this key to append code to the
   `build.sh` file for a given distribution and platform. For example, one might set a key
   `cos6-x86_64` in this mapping and set the value to `echo 'hi!'` to add `echo 'hi!'` to
   the build script for only `cos6-x86_64`.

## Adding a CDT package

To add a CDT package, make a PR on this repo with the following changes.

1. Add the name of the CDT `cdt_slugs.yaml` file.
2. Run the python script `gen_cdt_recipes.py`. This script will take about 10-20
   minutes to complete and will regenerate all of the CDT recipes. Pass the
   option `--only-new` to only build CDTs which do not have a directory in the
   `cdts` or `legacy_cdts` directories.
3. Commit any changes from steps 1+2 and open the PR.

The CI service will build the CDTs, report any errors, etc.


## Changing the CDT generation script `rpm.py`

If you make changes to the CDT generation script, make a PR on this repo using
the following steps.

1. Make sure the bump the `cdt_build_number` variable in the `conda_build_config.yaml` file.
2. Run the python script `gen_cdt_recipes.py`. This script will take about 10-20
   minutes to complete and will regenerate all of the CDT recipes. Pass the
   option `--only-new` to only build CDTs which do not have a directory in the
   `cdts` or `legacy_cdts` directories.
3. Commit any changes from steps 1+2 and open the PR.

The CI service will build the CDTs, report any errors, etc.


## Making Custom CDT recipes

If you have a CDT recipe that is not autogenerated, it can be added as follows.

1. Add the CDT name to the `cdt_slugs.yaml` file. Make sure to set `custom: true`
   in the metadata in the file.
2. Add the CDT recipe in a directory under the full CDT package name in either
   the `custom_cdts` or `legacy_custom_cdts` folder depending on whether or not
   the CDT is targeted at the old-style CDT format or the new-style one. If you
   do not know, ask someone on `conda-forge/core`.
3. Commit any changes from steps 1+2 and open the PR.

The CI service will build the CDTs, report any errors, etc.


## Old-style/legacy vs. New-style CDTs

The old-style CDTs are targeted at the conda-forge compilers that do not use the
`sysroot_{conda subdir}` packages (e.g., `sysroot_linux-64`, `sysroot_linux-aarch64`, etc.)
and build their own copy of glibc. These compilers also have `cos6` or `cos7`
in the name of the sysroot directory. The new-style CDTs use a sysroot directory
without `cos6` or `cos7` and are meant to work with the new conda-forge
compilers that depend on the `sysroot_{conda subdir}` packages.

**old-style CDT specs**
- needs to have `no_hoist` in the source sections
- sysroot directory has `conda_cos6` or `conda_cos7` in the path
- needs to have `run_constrained` entry of `sysroot_{conda subdir} ==99999999999` to prevent
  it from being co-installed w/ the new compilers or CDTs

**new-style CDT specs**
- needs to have `no_hoist` in the source sections
- sysroot directory has `conda` only in the path
- needs to have a `run` requirement on the proper version of the
  `sysroot_{subdir}` package so that it is only installed with CDTs from the
  right version of CentOS
- the versions of `sysroot_{conda subdir}` are 2.12 for CentOS 6 and 2.17 for CentOS 7.

## Azure CI Setup

This bit of code was run to setup azure.

```python
from conda_smithy.azure_ci_utils import register_repo, AzureConfig

cfg = AzureConfig(project_name='cdt-builds')
register_repo("conda-forge", "cdt-builds", config=cfg)
```

## Current CDT Builds

| Name | Downloads | Version | Platforms |
| --- | --- | --- | --- |
{% for cdt in cdts -%}
| [![Conda Recipe](https://img.shields.io/badge/recipe-{{ cdt.replace('-', '--') }}-green.svg)](https://anaconda.org/conda-forge/{{ cdt }}) | [![Conda Downloads](https://img.shields.io/conda/dn/conda-forge/{{ cdt }}.svg)](https://anaconda.org/conda-forge/{{ cdt }}) | [![Conda Version](https://img.shields.io/conda/vn/conda-forge/{{ cdt }}.svg)](https://anaconda.org/conda-forge/{{ cdt }}) | [![Conda Platforms](https://img.shields.io/conda/pn/conda-forge/{{ cdt }}.svg)](https://anaconda.org/conda-forge/{{ cdt }}) |
{% endfor %}
